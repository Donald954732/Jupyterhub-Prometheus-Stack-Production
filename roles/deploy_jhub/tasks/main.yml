- name: Test K8s service is contactable. If this fails check $KUBECONFIG is set.
  kubernetes.core.k8s_cluster_info:

- name: Enable PV Claims on Cinder
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/{{ jhub_storage_file_config }}"

- name: Create the working namespace
  kubernetes.core.k8s:
    name: "{{ jhub_namespace }}"
    kind: Namespace
    state: present

- name: create ssl cert (only in test)
  command:
    kubectl create secret tls example-tls --key="{{ role_path }}/files/example.key" --cert="{{ role_path }}/files/example.crt" --namespace="{{ jhub_namespace }}"

- name: Install jhub helm repo
  kubernetes.core.helm_repository:
    name: jupyterhub
    repo_url: https://jupyterhub.github.io/helm-chart/

- name: Install pre-set version of Jhub
  kubernetes.core.helm:
    chart_ref: jupyterhub/jupyterhub
    create_namespace: yes
    update_repo_cache: yes
    # Pulled from default
    name: "{{ jhub_deployed_name }}"
    chart_version: "{{ jhub_version }}"
    release_namespace: "{{ jhub_namespace }}"
    values_files:
      - "{{ role_path }}/files/{{ jhub_config_file }}"

- name: Create namespace for Nvidia components
  kubernetes.core.k8s:
    name: "{{ item }}"
    kind: Namespace
    state: present
  with_items:
    - gpu-operator
    - gpu-operator-resources

- name: Create the priorityClassName for nvidiaComponent
  # The default will set gpu daemonset and operator at system-node-critical 
  # which can't start outside of kube-system namespace in earlier version of k8s (<1.17)
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/nvidia-priority-class.yaml"

- name: Install Nvidia GPU Operator repo
  kubernetes.core.helm_repository:
    name: nvidia
    repo_url: https://nvidia.github.io/gpu-operator

- name: Install GPU Operator, pointing to own driver
  kubernetes.core.helm:
    chart_ref: nvidia/gpu-operator
    update_repo_cache: yes
    # Pulled from default
    name: gpu-operator
    release_namespace: gpu-operator
    release_values:
      daemonsets:
        priorityClassName: nvidia-priority-class
      operator:
        priorityClassName: nvidia-priority-class
      driver:
        repository: "harbor.stfc.ac.uk/stfc-cloud-private"
        image: "nvidia_driver"
        version: "{{ NVIDIA_DRIVER_VERSION }}"


- name: Install prometheus helm repo
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts

- name: Create the prometheus namespace
  kubernetes.core.k8s:
    name: "{{ prometheus_namespace }}"
    kind: Namespace
    state: present

- name: Install pre-set version of prometheus
  kubernetes.core.helm:
    chart_ref: prometheus-community/kube-prometheus-stack
    create_namespace: yes
    update_repo_cache: yes
    # Pulled from default
    name: "{{ prometheus_deployed_name }}"
    release_namespace: "{{ prometheus_namespace }}"
    release_values:
      grafana:
        adminPassword: "{{ grafana_password }}"
        service:
          enabled: true
          type: LoadBalancer
          port: 3000
          targetPort: 3000
          portName: service
        dashboardProviders:
          dashboardproviders.yaml:
            apiVersion: 1
            providers:
            - name: 'stfc'
              orgId: 1
              folder: 'stfc'
              type: file
              disableDeletion: false
              allowUiUpdates: true
              options:
                path: /var/lib/grafana/dashboards/stfc

        ## Configure grafana dashboard to import
        ## NOTE: To use dashboards you must also enable/configure dashboardProviders
        ## ref: https://grafana.com/dashboards
        ##
        ## dashboards per provider, use provider name as key.
        ##
        dashboards:
          stfc:
            local-dashboard:
              url: https://raw.githubusercontent.com/Donald954732/Jupyterhub-GPU-Dashboard/main/dashboard.json       
              datasource: Prometheus   
      ## Deploy a Prometheus instance
      ##
      prometheus:
        #set up externeal access for prometheus portal
        service:
          port: 9090
          targetPort: 9090
          type: LoadBalancer   
        prometheusSpec:
          serviceMonitorSelectorNilUsesHelmValues: false
        additionalServiceMonitors:
        # Name of the ServiceMonitor to create
        # for jupyterhub_metrics
        - name: "{{ jhub_deployed_name }}-https-service"
          namespaceSelector:
            matchNames:
            - "{{ jhub_namespace }}"
          selector:
            matchLabels:
              component: proxy-public
          endpoints:
          - targetPort: https
            path: /hub/metrics
            scheme: https
            #can be disabled. This is for developemnt where a self signed ssl cert is used
            tlsConfig:
              insecureSkipVerify: true 
    values_files:
      #the gpu metric scrapper have incompetable syntax and so should be placed in a separate file
      - "{{ role_path }}/files/prom_config.yaml"