- name: Create LB for kubectl and SSH
  openstack.cloud.loadbalancer:
    cloud: "{{ cloud_name_var }}"
    name: "{{ cluster_name }}_master_in"
    state: present
    vip_network: Internal
    listeners:
      - name: "{{ cluster_name }}_kubectl"
        protocol: TCP
        protocol_port: "{{ kubectl_port }}"
        pool:
          name: "{{ cluster_name }}_kubectl"
          protocol: TCP
      - name: "{{ cluster_name }}_ssh"
        protocol: TCP
        protocol_port: 22
        pool:
          name: "{{ cluster_name }}_ssh"
          protocol: TCP
    wait: yes
  register: kubectl_lb_result

- name: Wait for master nodes to come up...
  openstack.cloud.server_info:
    cloud: "{{ cloud_name_var }}"
    server: "*{{ cluster_name }}*-master*"
    filters:
      vm_state: active
  register: master_instances_result
  until: master_instances_result.openstack_servers | length == num_masters
  retries: 60
  delay: 30 # Try every 30 seconds for 30 minutes

- name: Get subnet ID
  openstack.cloud.subnets_info:
    cloud: "{{ cloud_name_var }}"
    name: "*{{ cluster_name }}*"
  register: subnet_result

- name: Assign master nodes to ssh pools
  openstack.cloud.lb_member:
    cloud: "{{ cloud_name_var }}"
    protocol_port: 22
    pool: "{{ cluster_name }}_ssh"
    name: "{{ item.name }}" # Use the node name
    address: "{{ item.addresses[cluster_name][0].addr }}"
    subnet_id: "{{ subnet_result.openstack_subnets[0].id }}"
    state: present
  with_items: "{{ master_instances_result.openstack_servers }}"

- name: Assign master nodes to kubectl pools
  openstack.cloud.lb_member:
    cloud: "{{ cloud_name_var }}"
    protocol_port: "{{ kubectl_port }}"
    pool: "{{ cluster_name }}_kubectl"
    name: "{{ item.name }}" # Use the node name
    address: "{{ item.addresses[cluster_name][0].addr }}"
    subnet_id: "{{ subnet_result.openstack_subnets[0].id }}"
    state: present
  with_items: "{{ master_instances_result.openstack_servers }}"
